// <auto-generated />
using System;
using E7BeautyShop.AgendaService.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E7BeautyShop.Appointment.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E7BeautyShop.AgendaService.Domain.Entities.Agenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Agendas");
                });

            modelBuilder.Entity("E7BeautyShop.AgendaService.Domain.Entities.Catalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("E7BeautyShop.AgendaService.Domain.Entities.DayRest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgendaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOnWeek")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgendaId");

                    b.ToTable("DaysRest");
                });

            modelBuilder.Entity("E7BeautyShop.AgendaService.Domain.Entities.OfficeHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgendaId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CatalogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateAndHour")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AgendaId");

                    b.HasIndex("CatalogId");

                    b.ToTable("OfficeHours");
                });

            modelBuilder.Entity("E7BeautyShop.AgendaService.Domain.Entities.Agenda", b =>
                {
                    b.OwnsOne("E7BeautyShop.AgendaService.Domain.ObjectsValue.ProfessionalId", "ProfessionalId", b1 =>
                        {
                            b1.Property<Guid>("AgendaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("Professional_Id");

                            b1.HasKey("AgendaId");

                            b1.ToTable("Agendas");

                            b1.WithOwner()
                                .HasForeignKey("AgendaId");
                        });

                    b.OwnsOne("E7BeautyShop.AgendaService.Domain.ObjectsValue.Weekday", "Weekday", b1 =>
                        {
                            b1.Property<Guid>("AgendaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeSpan?>("EndAt")
                                .IsRequired()
                                .HasColumnType("time")
                                .HasColumnName("Weekday_EndAt");

                            b1.Property<TimeSpan?>("StartAt")
                                .IsRequired()
                                .HasColumnType("time")
                                .HasColumnName("Weekday_StartAt");

                            b1.HasKey("AgendaId");

                            b1.ToTable("Agendas");

                            b1.WithOwner()
                                .HasForeignKey("AgendaId");
                        });

                    b.OwnsOne("E7BeautyShop.AgendaService.Domain.ObjectsValue.Weekend", "Weekend", b1 =>
                        {
                            b1.Property<Guid>("AgendaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeSpan?>("EndAt")
                                .IsRequired()
                                .HasColumnType("time")
                                .HasColumnName("Weekend_EndAt");

                            b1.Property<TimeSpan?>("StartAt")
                                .IsRequired()
                                .HasColumnType("time")
                                .HasColumnName("Weekend_StartAt");

                            b1.HasKey("AgendaId");

                            b1.ToTable("Agendas");

                            b1.WithOwner()
                                .HasForeignKey("AgendaId");
                        });

                    b.Navigation("ProfessionalId");

                    b.Navigation("Weekday");

                    b.Navigation("Weekend");
                });

            modelBuilder.Entity("E7BeautyShop.AgendaService.Domain.Entities.Catalog", b =>
                {
                    b.OwnsOne("E7BeautyShop.AgendaService.Domain.ObjectsValue.ServiceDescription", "ServiceDescription", b1 =>
                        {
                            b1.Property<Guid>("CatalogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("Description_Name");

                            b1.Property<decimal>("Price")
                                .HasColumnType("decimal(5,2)")
                                .HasColumnName("Description_Price");

                            b1.HasKey("CatalogId");

                            b1.ToTable("Catalogs");

                            b1.WithOwner()
                                .HasForeignKey("CatalogId");
                        });

                    b.Navigation("ServiceDescription");
                });

            modelBuilder.Entity("E7BeautyShop.AgendaService.Domain.Entities.DayRest", b =>
                {
                    b.HasOne("E7BeautyShop.AgendaService.Domain.Entities.Agenda", null)
                        .WithMany("DaysRest")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E7BeautyShop.AgendaService.Domain.Entities.OfficeHour", b =>
                {
                    b.HasOne("E7BeautyShop.AgendaService.Domain.Entities.Agenda", null)
                        .WithMany("OfficeHours")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E7BeautyShop.AgendaService.Domain.Entities.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId");

                    b.OwnsOne("E7BeautyShop.AgendaService.Domain.ObjectsValue.CustomerId", "CustomerId", b1 =>
                        {
                            b1.Property<Guid>("OfficeHourId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("Customer_Id");

                            b1.HasKey("OfficeHourId");

                            b1.ToTable("OfficeHours");

                            b1.WithOwner()
                                .HasForeignKey("OfficeHourId");
                        });

                    b.Navigation("Catalog");

                    b.Navigation("CustomerId");
                });

            modelBuilder.Entity("E7BeautyShop.AgendaService.Domain.Entities.Agenda", b =>
                {
                    b.Navigation("DaysRest");

                    b.Navigation("OfficeHours");
                });
#pragma warning restore 612, 618
        }
    }
}
