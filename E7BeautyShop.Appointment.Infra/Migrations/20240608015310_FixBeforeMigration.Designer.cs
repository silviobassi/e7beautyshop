// <auto-generated />
using System;
using E7BeautyShop.Appointment.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace E7BeautyShop.Appointment.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240608015310_FixBeforeMigration")]
    partial class FixBeforeMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("E7BeautyShop.Appointment.Core.Catalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("E7BeautyShop.Appointment.Core.OfficeHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CatalogId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAndHour")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("OfficeHours");
                });

            modelBuilder.Entity("E7BeautyShop.Appointment.Core.Catalog", b =>
                {
                    b.OwnsOne("E7BeautyShop.Appointment.Core.ServiceDescription", "ServiceDescription", b1 =>
                        {
                            b1.Property<Guid>("CatalogId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("DescriptionName");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("DescriptionPrice");

                            b1.HasKey("CatalogId");

                            b1.ToTable("Catalogs");

                            b1.WithOwner()
                                .HasForeignKey("CatalogId");
                        });

                    b.Navigation("ServiceDescription");
                });

            modelBuilder.Entity("E7BeautyShop.Appointment.Core.OfficeHour", b =>
                {
                    b.HasOne("E7BeautyShop.Appointment.Core.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("E7BeautyShop.Appointment.Core.CustomerId", "CustomerId", b1 =>
                        {
                            b1.Property<Guid>("OfficeHourId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("CustomerId");

                            b1.HasKey("OfficeHourId");

                            b1.ToTable("OfficeHours");

                            b1.WithOwner()
                                .HasForeignKey("OfficeHourId");
                        });

                    b.Navigation("Catalog");

                    b.Navigation("CustomerId");
                });
#pragma warning restore 612, 618
        }
    }
}
